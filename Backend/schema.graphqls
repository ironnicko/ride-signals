type User {
  id: ID!
  name: String!
  email: String!
  createdAt: String!
  lastLoginAt: String!
  isActive: Boolean!
}

type Ride {
  id: ID!
  rideCode: String!
  status: String!
  createdAt: String!
  createdBy: String!
  endedAt: String
  participants: [Participant!]!
  settings: RideSettings!
  Start: GeoLocation!
  Destination: GeoLocation!
}

type Participant {
  userId: ID!
  role: String!
  joinedAt: String!
}

type RideSettings {
  maxRiders: Int!
  visibility: String!
}

type Signal {
  id: ID!
  rideCode: String!
  fromUser: ID!
  type: String!
  timestamp: String!
  location: GeoLocation!
}

type GeoLocation {
  lat: Float!
  lng: Float!
}

type Query {
  me: User!
  ride(rideCode: String!): Ride!
  myRides: [Ride!]!
}

type Mutation {
  createRide(maxRiders: Int!, visibility: String!): Ride!
  joinRide(rideCode: String!, role: String!): Ride!
  sendSignal(
    rideCode: String!
    signalType: String!
    lat: Float
    lng: Float
  ): Boolean!
}
